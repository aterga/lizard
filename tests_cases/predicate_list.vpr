
field next: Ref
field val: Int

predicate List(h: Ref) {
    acc(h.next) && acc(h.val) && (h.next != null ==> List(h.next))
}


predicate ListNode(h: Ref) {
    acc(h.next) && acc(h.val)
}


method test01(h: Ref)
    requires List(h)
{
    unfold List(h)
    assert true;
}

method test02(h: Ref) 
    requires ListNode(h)
    requires unfolding ListNode(h) in h.val == 3
{
    unfold ListNode(h)
    var some: Int := h.val
    fold ListNode(h)
    assert some == 3
    assert true
}

// We expect the alloy model to generate an instance where h.next is null.
method test03(h: Ref)
    requires ListNode(h)
    requires unfolding ListNode(h) in h.next != null ==> h.val == 3
{
    unfold ListNode(h)
    assert h.val == 3
}