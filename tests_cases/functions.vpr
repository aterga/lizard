
function f0(i: Int): Int

method test0()
{
    var i: Int := f0(0)
    assert true;
}

function f0a(i: Int): Int
    ensures result == i

method test1()
{
    var i: Int := f0a(0)
    assert true
}

function f0b(i: Int): Ref
    ensures i > 0 <==> result != null

method test2()
{
    var i: Int
    var r1: Ref := f0b(1)
    var r2: Ref := f0b(0)

    var r3: Ref := f0b(i)
    assert true
}

method test2b() {
    var s: Set[Ref] := f0_set(1)
    assert true
}

function f0c(i: Int): Ref
    ensures i == 0 <==> result != null

method test2a() {
    var i: Int
    var r: Ref := f0c(i)
    assert true
    if (i > -1 && i < 1) {
        assert true
    }
}

function f0_set(i: Int): Set[Ref]
    ensures i > 0 ==> |result| == i


function f1(r: Ref): Ref

method test3(r1: Ref)
{
    var r2: Ref := f1(r1)
    if (r2 == null) {
        assert true
    } else {
        assert true
    }
}

method test3a(r1: Ref)
{
    var r2: Ref := f1(f1(r1))
    if (r2 == null) {
        assert true
    } else {
        assert true
    }
}

method test4(r1: Ref, r2: Ref)
{
    var r3: Ref
    r3 := f1(r1)
    if (r1 == r2) {
        r3 := f1(r2)
        assert true
    } else {
        r3 := r1
        assert true
    }
    // assert r3 == r1
    assert true
}

function f2(r: Ref): Ref
    ensures result != r && result != null

method test5(r1: Ref, r2: Ref)
    requires r1 != null && r2 != null
    requires r1 != r2
{
    var r3: Ref := f2(r1)
    var r4: Ref := f2(r2)
    assert r3 != r4
}

function f3(b: Bool): Bool

method test6(r1: Ref, r2: Ref)
{
    var b1: Bool := f3(r1 == r2)
    assert true
}

function f4(i: Int): Ref
method test7()

{
    var int: Int := 3
    var r: Ref := f4(int)
    assert true;
}

field val: Int
function f5(r: Ref): Int
    requires acc(r.val)
    ensures result == r.val

method test8(r: Ref)
    requires acc(r.val)
{
    var i: Int := f5(r)
    assert true
}