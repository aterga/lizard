domain Foobar {

    function helper(g: Int): Bool
    function dummy(bla: Bool): Bool
    function hard_to_prove(g: Int): Bool
    function also_hard_to_prove(g: Int): Bool

    axiom ax_Helper {
        forall g: Int :: { hard_to_prove(g) }
            helper(g) ==> hard_to_prove(g)
    }

    axiom ax_Helper2 {
        forall g: Int :: { dummy(hard_to_prove(g)) }
            hard_to_prove(g)
    }

    axiom ax_Helper3 {
        forall g: Int :: { dummy(hard_to_prove(g)) }
            hard_to_prove(g) && also_hard_to_prove(g)
    }
}

method test1(g: Int, x:Ref, y:Ref, A: Set[Ref])
    requires x in A && y in A && x != y
{
    // assume dummy( hard_to_prove(g) )
    if ( |A| < 2 ) {
        assert hard_to_prove(g)
    }
}

method test2(g: Int)
{
    // assume dummy( hard_to_prove(g) )
    assert hard_to_prove(g)
}

method test3(g: Int, x:Ref, y:Ref, A: Set[Ref])
    requires x in A && y in A && x != y
{
    // assume dummy( hard_to_prove(g) )
    if ( |A| < 2 ) {
        assert true
        // assert hard_to_prove(g)
    }
}

method test4(g: Int, x:Ref, y:Ref, A: Seq[Ref])
    requires x in A && y in A && x != y
{
    // assume dummy( hard_to_prove(g) )
    if ( |A| < 2 ) {
        assert hard_to_prove(g)
    } else {
        assert also_hard_to_prove(g)
    }
}