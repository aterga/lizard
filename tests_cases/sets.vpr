

method test01(r: Set[Int])
    requires |r| == 4
    requires forall i: Int :: i in r ==> i > 0
{
    assert true
    var a: Set[Int] := Set(1, 2)
    var b: Set[Int] := Set(1, 3)
    var c: Set[Int] := a intersection b
    var d: Set[Int] := a union b
    var e: Set[Int] := d union r
    assert true
}

method test1a(a: Set[Int], b: Set[Int])
    requires |a| == 2
    requires |b| == 2
    requires forall i: Int :: i in a ==> !(i in b) && i >= 0
    requires forall i: Int :: i in b ==> !(i in a) && i >= 0
{
    var c : Set[Int] := a union b
    var d : Set[Int] := a intersection b
    assert true
}

method test02()
{
    var some: Set[Int] := Set(1, 2)
    var other: Set[Int] := Set(2, 3)
    var third: Set[Int] := some union other union Set(4)
    assert |third intersection Set(5)| == 0
    assert true
}

method test03(s1: Set[Int], s2: Set[Int])
    requires s1 != s2
    requires |s1| >= 0
    requires |s2| >= 0
{
    var s3: Set[Int] := s1 intersection s2
    assert |s3|  == 0
}

method test4(s1: Set[Int], s2: Set[Int]) 
    requires |s1| > 0
    requires |s2| > 0
    requires |s1| != |s2|
{
    if ((s1 intersection s2) == Set()) {
        assert true
    } else {
        assert true
    }
    assert true
}


method test5a(s: Set[Ref])
    requires |s| > 1
{
    assert true
}


method test5(s: Set[Ref])
{
    var some: Ref
    assert true
}


method test6(s: Set[Set[Ref]], r: Ref)
    requires |s| > 0
    requires forall sub: Set[Ref] :: sub in s ==> |sub| > 0
{
    assert true
}


method test7(s1: Set[Ref], s2: Set[Ref])
    requires |s2 intersection s1| > 0
    requires |s1| > |s2|
{
    var s3: Set[Ref] := (s1 setminus s2)
    assert |s3| > 0
    assert exists r: Ref :: (r in s3) && (r in s1)
    assert true
}