

method test0(m1: Multiset[Ref], m2: Multiset[Int])
{
    assert true
}

method test1() {
    var ms1: Multiset[Int]
    var ms2: Multiset[Int]
    ms1 := Multiset(1)
    ms2 := Multiset(1, 1)

    assert true
}

method test2() {
    var ms: Multiset[Int] := Multiset(1, 2, 3, 3, 1)
    assert |ms| == 5
    assert |Multiset[Int]()| == 0
    assert true
}

method test3(ms1: Multiset[Int], n: Int, x: Int, y: Int)
    requires n == 3
    requires |ms1| == n
    requires (x in ms1) > 0
    requires (y in ms1) > 0
{
    var ms2: Multiset[Int] := ms1 setminus Multiset[Int]()
    assert (x in ms2) > 0
    assert (y in ms2) > 0
    assert |ms2| == n
    assert true
}

method test4(ms1: Multiset[Int], n: Int, x: Int, y: Int) 
    requires n == 3
    requires |ms1| == n
    requires (x in ms1) > 0
    requires (y in ms1) > 0
    requires x != y
{
    var ms2: Multiset[Int] := ms1 setminus Multiset(x)
    assert (y in ms2) > 0
    assert |ms2| == n - 1
    assert true
}

method test5(ms1: Multiset[Int], n: Int, x: Int)
    requires |ms1| == 3
{
    var ms2: Multiset[Int] := ms1 union ms1
    assert (x in ms2) > 0 <==> (x in ms1) > 0
    assert true
}

method test6(ms1: Multiset[Int], n: Int, x: Int, b: Bool)
    requires |ms1| == n
{
    var ms2: Multiset[Int] := ms1 intersection ms1
    // Not needed for Alloy
    // assert ms2 == ms1
    assert |ms2| == n
}

method test7(ms1: Multiset[Int], n: Int, x: Int, y: Int)
    requires |ms1| == n
{
    var ms2: Multiset[Int] := ms1 union Multiset(x, y)
    assert (x in ms2) > 0
    assert (y in ms2) > 0
    assert |ms2| == n + 2
    assert true
}

method test8(ms1: Multiset[Int], n: Int, x: Int, y: Int)
    requires |ms1| == n
{
    var ms2: Multiset[Int] := ms1 intersection Multiset(x, y)
    assert (x in ms2) > 0 <==> (x in ms1) > 0
    assert |ms2| <= 2
}

method test9(ms1: Multiset[Int], n: Int, x: Int)
    requires |ms1| == n
    requires (x in ms1) > 0
{
    var ms2: Multiset[Int] := ms1 setminus Multiset(x)
    assert ms2 subset ms1
    assert true
}