
field val: Int

predicate wrap(r: Ref) {
    acc(r.val)
}

method test0(ns: Set[Ref]) 
    requires forall r: Ref :: r in ns ==> acc(wrap(r))
{
    var ref: Ref
    assume ref in ns && ref != null

    unfold wrap(ref)
    var l: Int := ref.val
    assert true
}


method test1(ns: Set[Ref])
    requires forall r: Ref :: r in ns ==> acc(r.val)
{
    var ref: Ref
    assume ref in ns
    var i: Int := ref.val
    assert true
}

field next: Ref
method test2(ns: Set[Ref], ms: Set[Ref])
    requires (ns intersection ms) == Set()
    requires forall r: Ref :: r in ns ==> acc(wrap(r))
    requires forall r: Ref :: r in ms ==> acc(r.val) && acc(r.next)
{
    var r1: Ref
    assume r1 in ns
    unfold wrap(r1)
    var i: Int := r1.val

    var r2: Ref
    assume r2 in ms
    var j: Int := r2.val
    assert true
}

method test3(r: Ref)
    requires acc(r.val)
{
    assert true
}