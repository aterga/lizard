
domain Array {
  function len(a: Array): Int
  function loc(a: Array, i: Int): Ref // map to a ghost object with a "val" field

  function loc_to_array(r: Ref): Array
  function loc_to_index(r: Ref): Int

  axiom injectivity {
    forall a: Array, i:Int ::
      0 <= i && i < len(a)
            ==>    loc_to_array(loc(a,i)) == a
                && loc_to_index(loc(a,i)) == i
  }

  axiom lenPositive {
    forall a: Array :: len(a) >= 0
  }
}

field val: Int

method test0(a: Array)
    requires len(a) == 3
    requires forall i: Int :: 0 <= i && i < len(a) ==> acc(loc(a, i).val)
    requires forall i: Int :: 0 <= i && i < len(a) ==> loc(a, i).val == i
{
    var i: Int := 1
    var v: Int := loc(a, i).val
    assert true
}


method test1(a: Array, r: Ref)
    requires len(a) == 3
    requires forall i: Int :: 0 <= i && i < len(a) ==> acc(loc(a, i).val)
    requires forall i: Int :: 0 <= i && i < len(a) ==> loc(a, i).val == i
{
    loc(a, 0).val := 3
    assert true
}


