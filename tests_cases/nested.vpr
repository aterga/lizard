

method test_nested00() {
    var s: Seq[Set[Set[Set[Ref]]]]
    assert true
}

method test_nested0() {
    var s: Set[Set[Ref]]
    assume |s| == 3
    assume forall sub: Set[Ref] :: sub in s ==> |sub| == 2
    assert true;
}

method test_nested1() {
    var s: Seq[Set[Ref]]
    assume |s| == 3
    assume forall i: Int :: 0 <= i && i < |s| ==> |s[i]| == 1
    assert true
}

method test_nested2() {
    var s: Seq[Set[Ref]]
    assume |s| == 3
    assume forall i: Int :: 0 <= i && i < |s| ==> |s[i]| == i
    assert true
}

field val: Int
method test_nested3(s: Seq[Set[Ref]])
    requires |s| == 3
    requires forall i: Int :: 0 <= i && i < |s| ==> |s[i]| == i
    requires forall i: Int, r: Ref :: 0 <= i && i < |s| && r in s[i] ==> acc(r.val)
    requires forall i: Int, r: Ref :: 0 <= i && i < |s| && r in s[i] ==> r.val == i
{
    assert true
}

method test_nested4(s: Set[Multiset[Ref]])
    requires |s| == 3
    requires forall ms: Multiset[Ref] :: ms in s ==> |ms| == |s|
    requires forall ms: Multiset[Ref], r: Ref :: ms in s && (r in ms) > 0 ==> r != null
{
    assert true
}