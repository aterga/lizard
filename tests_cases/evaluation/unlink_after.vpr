
field next: Ref 


method test2(A: Set [Ref]) 
	requires forall r: Ref:: { r.next } acc(r.next) 
{	
	var y: Ref 
	
	assert perm(y.next) == write 
	y := new(*) 
	
	assert perm(y.next) == 2/1 
	assert false // fails, but should (probably) not
} 


field val: Int
method thisPlusNext(nodes: Set[Ref], n: Ref) returns (sum: Int)
	requires forall r: Ref :: r in nodes ==> acc(r.next) && acc(r.val)
	requires forall r: Ref :: r in nodes && r.next != null ==> r.next in nodes
	// requires forall r: Ref :: r in nodes && r.next != null ==> r.next != r
	requires n in nodes
	requires |nodes| == 4
{
	sum := n.val

	exhale acc(n.val)
	if (n.next != null) {
		sum := sum + n.next.val
		exhale acc(n.next.val)
	}
}
