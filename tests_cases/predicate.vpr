

field next: Ref
field val: Int

predicate ListNode(h: Ref) {
    acc(h.next) && acc(h.val)
}

// We expect the alloy model to generate an instance where h.next is null.
method test03(h: Ref)
    requires acc(ListNode(h))
    requires unfolding acc(ListNode(h)) in h.next != null ==> h.val == 3
{
    unfold acc(ListNode(h))
    assert h.val == 3
}

predicate ForNext(r: Ref) {
    acc(r.next)
}

predicate ForVal(r: Ref) {
    acc(r.val)
}

method test03a(r: Ref)
    requires acc(ForNext(r)) && acc(ForVal(r))
{
    assert true;
}

method test03b(r: Ref)
    requires acc(ForNext(null)) && acc(ForVal(null))
{
    unfold ForNext(r)
    assert true;
}


// Could generate both models where h.next is null and where it's not
method test04(h: Ref)
    requires acc(ListNode(h))
    requires unfolding acc(ListNode(h)) in h.next != null ==> h.val == 2
{
    unfold acc(ListNode(h))
    assert h.val != 2
}

method test05(a: Ref, b: Ref)
    requires acc(a.val) && acc(b.val)
{
    var some: Int
    some := a.val
    some := b.val
    assert some == b.val
    assert true
}

method test06(h: Ref, g: Ref)
    requires acc(ListNode(h))
    requires acc(ListNode(g))
{
    unfold acc(ListNode(h))
    unfold acc(ListNode(g))
    h.val := g.val
    assert true
}

predicate wrap(r: Ref) {
    acc(r.val)
}
method test7(nodes: Set[Ref], n: Ref)
    requires forall r: Ref :: r in nodes ==> acc(wrap(r))
    requires forall r: Ref :: r in nodes ==> unfolding acc(wrap(r)) in r.val == 3
    requires n in nodes
{
    unfold wrap(n)
    assert true
}