
field val: Int

method test0(r: Ref, p: Perm)
    requires acc(r.val)
    requires p > none && p < write
{
    assert true  // Should have val field
    exhale acc(r.val, p)
    assert true  // Should have val field
    var p1: Perm := perm(r.val)
    exhale acc(r.val, p1)
    assert true  // Should not have val field
}


method test1(ns: Set[Ref], n1: Ref, n2: Ref)
    requires forall r: Ref :: r in ns ==> acc(r.val)
    requires n1 in ns
    requires n2 in ns
    // requires n1.val > 0
    // requires n2.val == 2 * n1.val
    requires n1 != n2
    requires |ns| == 4
{
    assert true  // Should both have val field
    exhale acc(n1.val)
    assert true  // Only n2 should have val field
    exhale acc(n2.val)
    assert true  // Neither should have val field
}

method test2a(ns: Set[Ref], n1: Ref, n2: Ref)
    requires forall r: Ref :: r in ns ==> acc(r.val)
    requires n1 in ns
    requires n2 in ns
    requires n1 != n2
    requires |ns| == 4
{
    assert true  // Should both have val field
    exhale acc(n1.val)
    assert true  // Only n2 should have val field
    exhale acc(n2.val, 1/2)
    assert true  // Only n2 should have val field
    exhale acc(n2.val, 1/2)
    assert true  // Neither should have val field
}

method test2b(ns: Set[Ref], n1: Ref, n2: Ref)
    requires forall r: Ref :: r in ns ==> acc(r.val)
    requires n1 in ns
    requires n2 in ns
    requires n1 != n2
    requires |ns| == 4
{
    var p1: Perm
    var p2: Perm
    var p3: Perm
    assume p1 + p2 + p3 == write
    assume p1 > none && p2 > none && p3 > none
    assert true  // Both should have val field
    exhale acc(n1.val)
    exhale acc(n2.val, p1)
    exhale acc(n2.val, p2)
    exhale acc(n2.val, p3)
    assert true
}

method test2(ns: Set[Ref], n1: Ref, n2: Ref)
    requires forall r: Ref :: r in ns ==> acc(r.val)
    requires n1 in ns
    requires n2 in ns
    requires n1 != n2
    requires |ns| == 4
{
    assert true
    exhale acc(n1.val)
    exhale acc(n2.val, 1/2)
    assert true
    exhale acc(n2.val, 1/4)
    exhale acc(n2.val, 1/4)
    assert true
}

method test3(ns: Set[Ref], n1: Ref, p: Perm)
    requires forall r: Ref :: r in ns ==> acc(r.val)
    requires n1 in ns
    requires p > none && p <= write
{
    assert true
    exhale acc(n1.val, p)
    assert true
    if (p == write) {
        assert true
        var p1: Perm := perm(n1.val)
        assert p1 == none
    } else {
        var p1: Perm := perm(n1.val)  // Inspecting here generate wrong cases
        assert p1 > none
        exhale acc(n1.val, p1)
        assert true
    }
    assert true
}

method test4(ns: Set[Ref], n1: Ref)
    requires forall r: Ref :: r in ns ==> acc(r.val)
    requires n1 in ns
{
    var p1: Perm
    var p2: Perm
    assume p1 > none && p2 > none
    assume p1 + p2 < write
    assert true
    exhale acc(n1.val, p1)
    assert true
    exhale acc(n1.val, p2)
    assert true
    var p3: Perm := perm(n1.val)
    assert p3 > none
    exhale acc(n1.val, p3)
    assert true
}

method test5(r: Ref, p: Perm)
    requires p > none
{
    inhale acc(r.val, p)
    var p1: Perm
    var p2: Perm
    assume p1 > none
    assume p2 > none
    if (p1 + p2 == p) {
        exhale acc(r.val, p1)
        exhale acc(r.val, p2)
        assert true
    } elseif (p1 + p2 < p) {
        exhale acc(r.val, p1)
        exhale acc(r.val, p2)
        assert true
    }
}

method test6(x: Ref, y: Ref, p1: Perm, p2: Perm)
    requires acc(x.val, p1) && acc(y.val, p2)
{
    assume p1 + p2 > write
    // assert x != y  // Alloy is not able to infet this fact
    assert true
}