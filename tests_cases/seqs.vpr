


method test0(s1: Seq[Int])

{
    var s2: Seq[Int]
    s2 := [2..4)
    assert 2 in s2
    assert 3 in s2
    assert true
}

method test1()
{
    var s1: Seq[Int] := [1..4)
    var s2: Seq[Int] := s1[1 := 0]
    var s3: Seq[Bool] := Seq(true, false, false, true, true)
    assert true
}

method test2()
{
    var s1: Seq[Bool] := Seq(true, false, false, true, true)
    assert true
}


// Does not work currently, because of calls in the quantifier
method test3()
{
    var s1: Seq[Seq[Ref]]
    assume |s1| == 2
    assume forall i: Int :: 0 <= i && i < |s1| ==> |s1[i]| == 1
    assert true
}

method test3a()
{
    var s1: Seq[Seq[Int]]
    assume |s1| == 2
    assume forall i: Int :: 0 <= i && i < |s1| ==> s1[i] == Seq(i)
    assert true
}


method test4()
{
    var s1: Seq[Seq[Ref]]
    assume |s1| == 2
    assume |s1[0]| <= 1
    assume |s1[1]| <= 1
    assume s1[0] != s1[1]
    assert true
}

method test5()
{
    var s1: Seq[Int]
    assume |s1| == 4
    assume s1[..2] == s1[2..]
    assume s1[0] != s1[1]
    assert true
}

method test6()
{
    var s1: Seq[Int] := [1..4)
    var s2: Seq[Int] := s1[1 := 0][1 := 3]
    assert true
}

method test7()
{
    var s1: Seq[Int] := [0..3)
    var s2: Seq[Int] := s1 ++ s1
    assert 2 in s1
    assert true
}